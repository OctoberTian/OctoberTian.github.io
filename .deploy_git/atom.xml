<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十月博客</title>
  
  <subtitle>Give me five!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.octber.xyz/"/>
  <updated>2020-03-09T14:50:12.000Z</updated>
  <id>https://www.octber.xyz/</id>
  
  <author>
    <name>OctoberTian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解JVM-学习与实践（1）</title>
    <link href="https://www.octber.xyz/2020/03/04/fc6bf379.html"/>
    <id>https://www.octber.xyz/2020/03/04/fc6bf379.html</id>
    <published>2020-03-04T15:05:27.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《深入理解JVM虚拟机-JVM高级特性与最佳实践（周志明）第三版》是我一直都想钻研的一本书，作为一个Java后端开发路线的程序员，这些基础是有必要打好的，目前我还处于学习阶段，作为一名在校大学生，将来发展的路途还很遥远。</p><p>将这本书提上日程，也作为督促自己学习的一个重要节点，希望自己能坚持下去。</p><a id="more"></a><p><img src="/2020/03/04/深入理解JVM-学习与实践（1）/1583334715174.png" alt="1583334715174" style="zoom:80%;"></p><blockquote><p> 书籍标识</p></blockquote><p>深入理解Java虚拟机：JVM高级特性与最佳实践（第3版）<br>周志明 著 ISBN：978-7-111-64124-7<br>本书纸版由机械工业出版社于2019年出版，电子版由华章分社（北京华章图文信息有限公司，北京奥维博世图书发行有限公司）全球范围内制作与发行。</p><blockquote><p>声明</p></blockquote><p>我日后本系列内容基于本教材，如有侵权，请联系我删除。</p><blockquote><p>目录</p></blockquote><p>前言<br>致谢</p><p>第一部分 走近Java</p><p>第1章 走近Java<br>1.1 概述<br>1.2 Java技术体系<br>1.3 Java发展史<br>1.4 Java虚拟机家族<br>1.4.1 虚拟机始祖：Sun Classic/Exact VM<br>1.4.2 武林盟主：HotSpot VM<br>1.4.3 小家碧玉：Mobile/Embedded VM<br>1.4.4 天下第二：BEA JRockit/IBM J9 VM<br>1.4.5 软硬合璧：BEA Liquid VM/Azul VM<br>1.4.6 挑战者：Apache Harmony/Google Android DalvikVM<br>1.4.7 没有成功，但并非失败：Microsoft JVM及其他<br>1.4.8 百家争鸣<br>1.5 展望Java技术的未来<br>1.5.1 无语言倾向<br>1.5.2 新一代即时编译器<br>1.5.3 向Native迈进<br>1.5.4 灵活的胖子<br>1.5.5 语言语法持续增强<br>1.6 实战：自己编译JDK<br>1.6.1 获取源码<br>1.6.2 系统需求<br>1.6.3 构建编译环境<br>1.6.4 进行编译<br>1.6.5 在IDE工具中进行源码调试<br>1.7 本章小结<br>第二部分 自动内存管理<br>第2章 Java内存区域与内存溢出异常<br>2.1 概述<br>2.2 运行时数据区域<br>2.2.1 程序计数器<br>2.2.2 Java虚拟机栈<br>2.2.3 本地方法栈<br>2.2.4 Java堆<br>2.2.5 方法区<br>2.2.6 运行时常量池<br>2.2.7 直接内存<br>2.3 HotSpot虚拟机对象探秘<br>2.3.1 对象的创建<br>2.3.2 对象的内存布局<br>2.3.3 对象的访问定位<br>2.4 实战：OutOfMemoryError异常<br>2.4.1 Java堆溢出<br>2.4.2 虚拟机栈和本地方法栈溢出<br>2.4.3 方法区和运行时常量池溢出<br>2.4.4 本机直接内存溢出<br>2.5 本章小结<br>第3章 垃圾收集器与内存分配策略<br>3.1 概述<br>3.2 对象已死？<br>3.2.1 引用计数算法<br>3.2.2 可达性分析算法<br>3.2.3 再谈引用<br>3.2.4 生存还是死亡？<br>3.2.5 回收方法区<br>3.3 垃圾收集算法<br>3.3.1 分代收集理论<br>3.3.2 标记-清除算法<br>3.3.3 标记-复制算法<br>3.3.4 标记-整理算法<br>3.4 HotSpot的算法细节实现<br>3.4.1 根节点枚举<br>3.4.2 安全点<br>3.4.3 安全区域<br>3.4.4 记忆集与卡表<br>3.4.5 写屏障<br>3.4.6 并发的可达性分析<br>3.5 经典垃圾收集器<br>3.5.1 Serial收集器<br>3.5.2 ParNew收集器<br>3.5.3 Parallel Scavenge收集器<br>3.5.4 Serial Old收集器<br>3.5.5 Parallel Old收集器<br>3.5.6 CMS收集器<br>3.5.7 Garbage First收集器<br>3.6 低延迟垃圾收集器<br>3.6.1 Shenandoah收集器<br>3.6.2 ZGC收集器<br>3.7 选择合适的垃圾收集器<br>3.7.1 Epsilon收集器<br>3.7.2 收集器的权衡<br>3.7.3 虚拟机及垃圾收集器日志<br>3.7.4 垃圾收集器参数总结<br>3.8 实战：内存分配与回收策略<br>3.8.1 对象优先在Eden分配<br>3.8.2 大对象直接进入老年代<br>3.8.3 长期存活的对象将进入老年代<br>3.8.4 动态对象年龄判定<br>3.8.5 空间分配担保<br>3.9 本章小结<br>第4章 虚拟机性能监控、故障处理工具<br>4.1 概述<br>4.2 基础故障处理工具<br>4.2.1 jps：虚拟机进程状况工具<br>4.2.2 jstat：虚拟机统计信息监视工具<br>4.2.3 jinfo：Java配置信息工具<br>4.2.4 jmap：Java内存映像工具<br>4.2.5 jhat：虚拟机堆转储快照分析工具<br>4.2.6 jstack：Java堆栈跟踪工具<br>4.2.7 基础工具总结<br>4.3 可视化故障处理工具<br>4.3.1 JHSDB：基于服务性代理的调试工具<br>4.3.2 JConsole：Java监视与管理控制台<br>4.3.3 VisualVM：多合-故障处理工具<br>4.3.4 Java Mission Control：可持续在线的监控工具<br>4.4 HotSpot虚拟机插件及工具<br>4.5 本章小结<br>第5章 调优案例分析与实战<br>5.1 概述<br>5.2 案例分析<br>5.2.1 大内存硬件上的程序部署策略<br>5.2.2 集群间同步导致的内存溢出<br>5.2.3 堆外内存导致的溢出错误<br>5.2.4 外部命令导致系统缓慢<br>5.2.5 服务器虚拟机进程崩溃<br>5.2.6 不恰当数据结构导致内存占用过大<br>5.2.7 由Windows虚拟内存导致的长时间停顿<br>5.2.8 由安全点导致长时间停顿<br>5.3 实战：Eclipse运行速度调优<br>5.3.1 调优前的程序运行状态<br>5.3.2 升级JDK版本的性能变化及兼容问题<br>5.3.3 编译时间和类加载时间的优化<br>5.3.4 调整内存设置控制垃圾收集频率<br>5.3.5 选择收集器降低延迟<br>5.4 本章小结<br>第三部分 虚拟机执行子系统<br>第6章 类文件结构<br>6.1 概述<br>6.2 无关性的基石<br>6.3 Class类文件的结构<br>6.3.1 魔数与Class文件的版本<br>6.3.2 常量池<br>6.3.3 访问标志<br>6.3.4 类索引、父类索引与接口索引集合<br>6.3.5 字段表集合<br>6.3.6 方法表集合<br>6.3.7 属性表集合<br>6.4 字节码指令简介<br>6.4.1 字节码与数据类型<br>6.4.2 加载和存储指令<br>6.4.3 运算指令<br>6.4.4 类型转换指令<br>6.4.5 对象创建与访问指令<br>6.4.6 操作数栈管理指令<br>6.4.7 控制转移指令<br>6.4.8 方法调用和返回指令<br>6.4.9 异常处理指令<br>6.4.10 同步指令<br>6.5 公有设计，私有实现<br>6.6 Class文件结构的发展<br>6.7 本章小结<br>第7章 虚拟机类加载机制<br>7.1 概述<br>7.2 类加载的时机<br>7.3 类加载的过程<br>7.3.1 加载<br>7.3.2 验证<br>7.3.3 准备<br>7.3.4 解析<br>7.3.5 初始化<br>7.4 类加载器<br>7.4.1 类与类加载器<br>7.4.2 双亲委派模型<br>7.4.3 破坏双亲委派模型<br>7.5 Java模块化系统<br>7.5.1 模块的兼容性<br>7.5.2 模块化下的类加载器<br>7.6 本章小结<br>第8章 虚拟机字节码执行引擎<br>8.1 概述<br>8.2 运行时栈帧结构<br>8.2.1 局部变量表<br>8.2.2 操作数栈<br>8.2.3 动态连接<br>8.2.4 方法返回地址<br>8.2.5 附加信息<br>8.3 方法调用<br>8.3.1 解析<br>8.3.2 分派<br>8.4 动态类型语言支持<br>8.4.1 动态类型语言<br>8.4.2 Java与动态类型<br>8.4.3 java.lang.invoke包<br>8.4.4 invokedynamic指令<br>8.4.5 实战：掌控方法分派规则<br>8.5 基于栈的字节码解释执行引擎<br>8.5.1 解释执行<br>8.5.2 基于栈的指令集与基于寄存器的指令集<br>8.5.3 基于栈的解释器执行过程<br>8.6 本章小结<br>第9章 类加载及执行子系统的案例与实战<br>9.1 概述<br>9.2 案例分析<br>9.2.1 Tomcat：正统的类加载器架构<br>9.2.2 OSGi：灵活的类加载器架构<br>9.2.3 字节码生成技术与动态代理的实现<br>9.2.4 Backport工具：Java的时光机器<br>9.3 实战：自己动手实现远程执行功能<br>9.3.1 目标<br>9.3.2 思路<br>9.3.3 实现<br>9.3.4 验证<br>9.4 本章小结<br>第四部分 程序编译与代码优化<br>第10章 前端编译与优化<br>10.1 概述<br>10.2 Javac编译器<br>10.2.1 Javac的源码与调试<br>10.2.2 解析与填充符号表<br>10.2.3 注解处理器<br>10.2.4 语义分析与字节码生成<br>10.3 Java语法糖的味道<br>10.3.1 泛型<br>10.3.2 自动装箱、拆箱与遍历循环<br>10.3.3 条件编译<br>10.4 实战：插入式注解处理器<br>10.4.1 实战目标<br>10.4.2 代码实现<br>10.4.3 运行与测试<br>10.4.4 其他应用案例<br>10.5 本章小结<br>第11章 后端编译与优化<br>11.1 概述<br>11.2 即时编译器<br>11.2.1 解释器与编译器<br>11.2.2 编译对象与触发条件<br>11.2.3 编译过程<br>11.2.4 实战：查看及分析即时编译结果<br>11.3 提前编译器<br>11.3.1 提前编译的优劣得失<br>11.3.2 实战：Jaotc的提前编译<br>11.4 编译器优化技术<br>11.4.1 优化技术概览<br>11.4.2 方法内联<br>11.4.3 逃逸分析<br>11.4.4 公共子表达式消除<br>11.4.5 数组边界检查消除<br>11.5 实战：深入理解Graal编译器<br>11.5.1 历史背景<br>11.5.2 构建编译调试环境<br>11.5.3 JVMCI编译器接口<br>11.5.4 代码中间表示<br>11.5.5 代码优化与生成<br>11.6 本章小结<br>第五部分 高效并发<br>第12章 Java内存模型与线程<br>12.1 概述<br>12.2 硬件的效率与一致性<br>12.3 Java内存模型<br>12.3.1 主内存与工作内存<br>12.3.2 内存间交互操作<br>12.3.3 对于volatile型变量的特殊规则<br>12.3.4 针对long和double型变量的特殊规则<br>12.3.5 原子性、可见性与有序性<br>12.3.6 先行发生原则<br>12.4 Java与线程<br>12.4.1 线程的实现<br>12.4.2 Java线程调度<br>12.4.3 状态转换<br>12.5 Java与协程<br>12.5.1 内核线程的局限<br>12.5.2 协程的复苏<br>12.5.3 Java的解决方案<br>12.6 本章小结<br>第13章 线程安全与锁优化<br>13.1 概述<br>13.2 线程安全<br>13.2.1 Java语言中的线程安全<br>13.2.2 线程安全的实现方法<br>13.3 锁优化<br>13.3.1 自旋锁与自适应自旋<br>13.3.2 锁消除<br>13.3.3 锁粗化<br>13.3.4 轻量级锁<br>13.3.5 偏向锁<br>13.4 本章小结<br>附录A 在Windows系统下编译OpenJDK 6<br>附录B 展望Java技术的未来（2013年版）<br>附录C 虚拟机字节码指令表<br>附录D 对象查询语言（OQL）简介<br>附录E JDK历史版本轨迹</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;《深入理解JVM虚拟机-JVM高级特性与最佳实践（周志明）第三版》是我一直都想钻研的一本书，作为一个Java后端开发路线的程序员，这些基础是有必要打好的，目前我还处于学习阶段，作为一名在校大学生，将来发展的路途还很遥远。&lt;/p&gt;
&lt;p&gt;将这本书提上日程，也作为督促自己学习的一个重要节点，希望自己能坚持下去。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>DeepLearning4J(二)：简易一元线性回归</title>
    <link href="https://www.octber.xyz/2020/01/22/ef52c58b.html"/>
    <id>https://www.octber.xyz/2020/01/22/ef52c58b.html</id>
    <published>2020-01-22T04:24:18.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本节学习简易一元线性回归</p><a id="more"></a><blockquote><p>考虑一个模型，用数据去计算一个y=ax+b其中a和b的值，比如我们输入(1,1)(2,2)</p><p>这就是一个一层的神经网络</p></blockquote><h2 id="神经网络的配置"><a href="#神经网络的配置" class="headerlink" title="神经网络的配置"></a>神经网络的配置</h2><p>我们需要配置神经网络的超参数-&gt;为什么叫超参数呢？</p><p>超参数 -&gt; 用于辅助模型学习参数的参数 -&gt; hyper-parameter -&gt; 超参数学习的参数是什么？</p><p> y = ax + b其中的x,y是已知的，这是用于神经网络的训练样本。参数 a,b是未知的，所以a,b是我们神经网络需要学习的参数同时我们需要配置超参数来辅助神经网络学习到a 和 b这两个参数</p><ul><li>seed</li></ul><p>随机种子 -&gt; 随机数生成通常需要一个起点，我们所生成的随机数都是伪随机数。 因为神经网络训练时，模型的初试权重和偏置是随机生成的,我们需要随机数种子保证每次初始化的权重大体一致,这样可以保证模型结果的可复现性,只有模型结果可复现-&gt;进行神经网络的调参-&gt;我们的调参对于模型效果提升是有意义的 </p><ul><li>optimizationAlgo</li></ul><p>优化算法使用。最常见:OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Optimization algorithm to use</span></span><br><span class="line"><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Adam Gibson</span></span><br><span class="line"><span class="hljs-comment"> *</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> OptimizationAlgorithm &#123;</span><br><span class="line">    LINE_GRADIENT_DESCENT,</span><br><span class="line">    CONJUGATE_GRADIENT,</span><br><span class="line">    LBFGS,</span><br><span class="line">    STOCHASTIC_GRADIENT_DESCENT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>weightInit</li></ul><p>对神经网络的权重进行随机初始化,随机的权重要比全0的权重对神经网络训练更有意义</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> WeightInit &#123;</span><br><span class="line">    DISTRIBUTION,</span><br><span class="line">    ZERO,</span><br><span class="line">    ONES,</span><br><span class="line">    SIGMOID_UNIFORM,</span><br><span class="line">    NORMAL,</span><br><span class="line">    LECUN_NORMAL,</span><br><span class="line">    UNIFORM,</span><br><span class="line">    XAVIER,</span><br><span class="line">    XAVIER_UNIFORM,</span><br><span class="line">    XAVIER_FAN_IN,</span><br><span class="line">    XAVIER_LEGACY RELU,</span><br><span class="line">    RELU_UNIFORM,</span><br><span class="line">    IDENTITY,</span><br><span class="line">    LECUN_UNIFORM,</span><br><span class="line">    VAR_SCALING_NORMAL_FAN_IN,</span><br><span class="line">    VAR_SCALING_NORMAL_FAN_OUT,</span><br><span class="line">    VAR_SCALING_NORMAL_FAN_AVG,</span><br><span class="line">    VAR_SCALING_UNIFORM_FAN_IN,</span><br><span class="line">    VAR_SCALING_UNIFORM_FAN_OUT,</span><br><span class="line">    VAR_SCALING_UNIFORM_FAN_AVG</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>updater</li></ul><p>优化算法</p><p>—————————分割线—————————</p><p>完整代码:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleRegression</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//随机数种子，用于结果复现</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> seed = <span class="hljs-number">12345</span>;</span><br><span class="line">    <span class="hljs-comment">//对于每个miniBatch的迭代次数</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> iterations = <span class="hljs-number">10</span>;</span><br><span class="line">    <span class="hljs-comment">//epoch数量(全部数据的训练次数)</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> nEpochs = <span class="hljs-number">20</span>;</span><br><span class="line">    <span class="hljs-comment">//一共生成多少样本点</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> nSamples = <span class="hljs-number">1000</span>;</span><br><span class="line">    <span class="hljs-comment">//Batch size: i.e., each epoch has nSamples/batchSize parameter updates</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> batchSize = <span class="hljs-number">100</span>;</span><br><span class="line">    <span class="hljs-comment">//网络模型学习率</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> learningRate = <span class="hljs-number">0.01</span>;</span><br><span class="line">    <span class="hljs-comment">//随机数据生成的范围</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MIN_RANGE = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MAX_RANGE = <span class="hljs-number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Random rng = <span class="hljs-keyword">new</span> Random(seed);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//Create the network</span></span><br><span class="line">        <span class="hljs-keyword">int</span> numInput = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> numOutputs = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 神经网络的配置</span></span><br><span class="line"><span class="hljs-comment">         我们需要配置神经网络的超参数-&gt;为什么叫超参数呢？</span></span><br><span class="line"><span class="hljs-comment">         超参数 -&gt; 用于辅助模型学习参数的参数 -&gt; hyper-parameter -&gt; 超参数</span></span><br><span class="line"><span class="hljs-comment">         学习的参数是什么？ y = ax + b</span></span><br><span class="line"><span class="hljs-comment">         其中的x,y是已知的，这是用于神经网络的训练样本。</span></span><br><span class="line"><span class="hljs-comment">         参数 a,b是未知的，所以a,b是我们神经网络需要学习的参数</span></span><br><span class="line"><span class="hljs-comment">         同时我们需要配置超参数来辅助神经网络学习到a 和 b这两个参数</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        MultiLayerConfiguration conf = <span class="hljs-keyword">new</span> NeuralNetConfiguration.Builder()</span><br><span class="line">                <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                 * 随机种子 -&gt; 随机数生成通常需要一个起点，我们所生成的随机数都是伪随机数。</span></span><br><span class="line"><span class="hljs-comment">                 * 因为神经网络训练时，模型的初试权重和偏置是随机生成的</span></span><br><span class="line"><span class="hljs-comment">                 * 我们需要随机数种子保证每次初始化的权重大体一致</span></span><br><span class="line"><span class="hljs-comment">                 * 这样可以保证模型结果的可复现性</span></span><br><span class="line"><span class="hljs-comment">                 * 只有模型结果可复现-&gt;进行神经网络的调参-&gt;我们的调参对于模型效果提升是有意义的</span></span><br><span class="line"><span class="hljs-comment">                 */</span></span><br><span class="line">                .seed(seed)</span><br><span class="line">                <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                 * 找方向</span></span><br><span class="line"><span class="hljs-comment">                 */</span></span><br><span class="line">                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)</span><br><span class="line">                <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                 * 对神经网络的权重进行随机初始化</span></span><br><span class="line"><span class="hljs-comment">                 * 随机的权重要比全0的权重对神经网络训练更有意义</span></span><br><span class="line"><span class="hljs-comment">                 */</span></span><br><span class="line">                .weightInit(WeightInit.XAVIER)</span><br><span class="line">                <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                 * 优化算法</span></span><br><span class="line"><span class="hljs-comment">                 * tf,keras -&gt; optimizer</span></span><br><span class="line"><span class="hljs-comment">                 * 迈步子</span></span><br><span class="line"><span class="hljs-comment">                 *</span></span><br><span class="line"><span class="hljs-comment">                 * 学习率迈步子的大小</span></span><br><span class="line"><span class="hljs-comment">                 * 去吴恩达-&gt;网易云课堂-&gt;微专业</span></span><br><span class="line"><span class="hljs-comment">                 */</span></span><br><span class="line">                .updater(<span class="hljs-keyword">new</span> Sgd(learningRate))</span><br><span class="line">                .list()</span><br><span class="line">                .layer(<span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> OutputLayer.Builder(LossFunctions.LossFunction.MSE)</span><br><span class="line">                        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                         * y = x</span></span><br><span class="line"><span class="hljs-comment">                         * None</span></span><br><span class="line"><span class="hljs-comment">                         */</span></span><br><span class="line">                        .activation(Activation.IDENTITY)</span><br><span class="line">                        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                         * 上一层输出</span></span><br><span class="line"><span class="hljs-comment">                         */</span></span><br><span class="line">                        .nIn(numInput)</span><br><span class="line">                        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                         * 当前层神经单元的个数</span></span><br><span class="line"><span class="hljs-comment">                         */</span></span><br><span class="line">                        .nOut(numOutputs).build())</span><br><span class="line">                <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                 * 预训练</span></span><br><span class="line"><span class="hljs-comment">                 */</span></span><br><span class="line">                .pretrain(<span class="hljs-keyword">false</span>)</span><br><span class="line">                <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">                 * 反向传播</span></span><br><span class="line"><span class="hljs-comment">                 */</span></span><br><span class="line">                .backprop(<span class="hljs-keyword">true</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 使用 MultiLayerNetwork 对我们的 conf 进行一个包装</span></span><br><span class="line">        <span class="hljs-comment">// 对神经网络进行了构建</span></span><br><span class="line">        MultiLayerNetwork net = <span class="hljs-keyword">new</span> MultiLayerNetwork(conf);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 必须调用 init() 方法</span></span><br><span class="line">        <span class="hljs-comment">// 是对于模型参数的初始化</span></span><br><span class="line">        net.init();</span><br><span class="line"></span><br><span class="line">        System.out.println(net.summary());</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 有监听器，用于监听我们神经网络训练时候的状态</span></span><br><span class="line"><span class="hljs-comment">         * 主要是用于监听我们神经网络训练时候的损失函数的得分</span></span><br><span class="line"><span class="hljs-comment">         * 目前参数为1，则说明网络每训练一次，就会打印一次损失函数的得分</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line"><span class="hljs-comment">//        net.setListeners(new ScoreIterationListener(1));</span></span><br><span class="line"></span><br><span class="line">        DataSetIterator iterator = getTrainingData(batchSize, rng);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 后面就是进行训练了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本节学习简易一元线性回归&lt;/p&gt;
    
    </summary>
    
      <category term="/java" scheme="https://www.octber.xyz/categories/java/"/>
    
    
      <category term="dl4j" scheme="https://www.octber.xyz/tags/dl4j/"/>
    
  </entry>
  
  <entry>
    <title>DeepLearning4J(一)：入门</title>
    <link href="https://www.octber.xyz/2020/01/21/1da953fb.html"/>
    <id>https://www.octber.xyz/2020/01/21/1da953fb.html</id>
    <published>2020-01-21T15:20:49.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一系列博文我将学习DeepLearning4J深度学习的一系列知识，依托于一个毕业设计项目：基于深度学习图像识别分析的X光骨龄检测与分析。选择dl4j的主要原因是因为个人喜欢Java变成，对python不感冒，而dl4j是一个企业级应用水准的深度学习框架，完全可以胜任这项任务。</p><a id="more"></a><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li>dl4j官网： <a href="https://deeplearning4j.org/" target="_blank" rel="noopener">https://deeplearning4j.org/</a></li><li>dl4j的Git地址： <a href="https://github.com/deeplearning4j" target="_blank" rel="noopener">https://github.com/deeplearning4j</a></li><li>dl4j官方中文快速入门： <a href="https://deeplearning4j.org/cn/quickstart" target="_blank" rel="noopener">https://deeplearning4j.org/cn/quickstart</a></li><li>教程Git地址: <a href="https://github.com/sjsdfg/dl4j-tutorials" target="_blank" rel="noopener">https://github.com/sjsdfg/dl4j-tutorials</a></li><li>优秀博客: <a href="https://blog.csdn.net/u011669700/article/details/80139619" target="_blank" rel="noopener">https://blog.csdn.net/u011669700/article/details/80139619</a></li></ul><h2 id="入门知识-Lesson-01"><a href="#入门知识-Lesson-01" class="headerlink" title="入门知识-Lesson 01"></a>入门知识-Lesson 01</h2><h3 id="两种存储方式："><a href="#两种存储方式：" class="headerlink" title="两种存储方式："></a>两种存储方式：</h3><ul><li>C Order行邮箱存储</li><li>F Order列优先储存</li></ul><p>而Dl4j所有的矩阵运算都是F Order进行存储并且进行计算的</p><h3 id="基础类-INDArray"><a href="#基础类-INDArray" class="headerlink" title="基础类 INDArray"></a>基础类 INDArray</h3><p>这是一个可序列化的接口类</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><blockquote><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Interface <span class="hljs-keyword">for</span> an ndarray 简称 INDArray</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>它主要可以创建一些基本的多元数组:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*    构造一个3行5列的全0  ndarray */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"构造一个3行5列的全0  ndarray"</span>);</span><br><span class="line">INDArray zeros = Nd4j.zeros(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);</span><br><span class="line">System.out.println(zeros);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*    构造一个3行5列的全1 ndarray */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"构造一个3行5列的全1 ndarray"</span>);</span><br><span class="line">INDArray ones = Nd4j.ones(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);System.out.println(ones);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*    构造一个3行5列，数组元素均为随机产生的ndarray */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"构造一个3行5列，数组元素均为随机产生的ndarray"</span>);</span><br><span class="line">INDArray rands = Nd4j.rand(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);</span><br><span class="line">System.out.println(rands);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*    构造一个3行5列，数组元素服从高斯分布（平均值为0，标准差为1）的ndarray */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"构造一个3行5列，数组元素服从高斯分布（平均值为0，标准差为1）的ndarray"</span>);</span><br><span class="line">INDArray randns = Nd4j.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);System.out.println(randns);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*    给一个一维数据，根据shape创造ndarray */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"给一个一维数据，根据shape创造ndarray"</span>);</span><br><span class="line">INDArray array1 = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;);</span><br><span class="line">System.out.println(array1);</span><br><span class="line">INDArray array2 = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;);</span><br><span class="line">System.out.println(array2);</span><br></pre></td></tr></table></figure><p>输出的结果为:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">构造一个<span class="hljs-number">3</span>行<span class="hljs-number">5</span>列的全<span class="hljs-number">0</span>  ndarray</span><br><span class="line">[[         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>], </span><br><span class="line"> [         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>], </span><br><span class="line"> [         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>,         <span class="hljs-number">0</span>]]</span><br><span class="line">构造一个<span class="hljs-number">3</span>行<span class="hljs-number">5</span>列的全<span class="hljs-number">1</span> ndarray</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">1.0000</span>]]</span><br><span class="line">构造一个<span class="hljs-number">3</span>行<span class="hljs-number">5</span>列，数组元素均为随机产生的ndarray</span><br><span class="line">[[    <span class="hljs-number">0.9616</span>,    <span class="hljs-number">0.9450</span>,    <span class="hljs-number">0.5324</span>,    <span class="hljs-number">0.4563</span>,    <span class="hljs-number">0.5084</span>], </span><br><span class="line"> [    <span class="hljs-number">0.8097</span>,    <span class="hljs-number">0.9463</span>,    <span class="hljs-number">0.8487</span>,    <span class="hljs-number">0.1333</span>,    <span class="hljs-number">0.4296</span>], </span><br><span class="line"> [    <span class="hljs-number">0.5177</span>,    <span class="hljs-number">0.0301</span>,    <span class="hljs-number">0.6035</span>,    <span class="hljs-number">0.7891</span>,    <span class="hljs-number">0.0182</span>]]</span><br><span class="line">构造一个<span class="hljs-number">3</span>行<span class="hljs-number">5</span>列，数组元素服从高斯分布（平均值为<span class="hljs-number">0</span>，标准差为<span class="hljs-number">1</span>）的ndarray</span><br><span class="line">[[    <span class="hljs-number">1.0183</span>,   -<span class="hljs-number">2.1546</span>,    <span class="hljs-number">0.7305</span>,   -<span class="hljs-number">0.3929</span>,   -<span class="hljs-number">1.1482</span>], </span><br><span class="line"> [   -<span class="hljs-number">2.0195</span>,    <span class="hljs-number">1.2381</span>,   -<span class="hljs-number">0.6725</span>,   -<span class="hljs-number">1.1822</span>,   -<span class="hljs-number">0.4341</span>], </span><br><span class="line"> [   -<span class="hljs-number">0.1106</span>,   -<span class="hljs-number">1.9217</span>,   -<span class="hljs-number">0.1923</span>,   -<span class="hljs-number">0.4366</span>,    <span class="hljs-number">0.2219</span>]]</span><br><span class="line">给一个一维数据，根据shape创造ndarray</span><br><span class="line">[[    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">2.0000</span>]]</span><br><span class="line">[[    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">2.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">2.0000</span>]]</span><br></pre></td></tr></table></figure><h4 id="设置和修改-遍历"><a href="#设置和修改-遍历" class="headerlink" title="设置和修改/遍历"></a>设置和修改/遍历</h4><p>样例代码:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">INDArray nd = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;);</span><br><span class="line">System.out.println(<span class="hljs-string">"打印原有数组"</span>);</span><br><span class="line">System.out.println(nd);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    获取指定索引的值</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"获取数组下标为0, 3的值"</span>);</span><br><span class="line"><span class="hljs-keyword">double</span> value = nd.getDouble(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);</span><br><span class="line">System.out.println(value);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    修改指定索引的值</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"修改数组下标为0, 3的值"</span>);</span><br><span class="line"><span class="hljs-comment">//scalar 标量</span></span><br><span class="line">nd.putScalar(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(nd);</span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    使用索引迭代器遍历ndarray，使用c order</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"使用索引迭代器遍历ndarray"</span>);</span><br><span class="line">NdIndexIterator iter = <span class="hljs-keyword">new</span> NdIndexIterator(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>);</span><br><span class="line"><span class="hljs-keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    <span class="hljs-keyword">long</span>[] nextIndex = iter.next();</span><br><span class="line">    <span class="hljs-keyword">double</span> nextVal = nd.getDouble(nextIndex);</span><br><span class="line"></span><br><span class="line">    System.out.println(nextVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">打印原有数组</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">3.0000</span>,    <span class="hljs-number">4.0000</span>,    <span class="hljs-number">5.0000</span>,    <span class="hljs-number">6.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">7.0000</span>,    <span class="hljs-number">8.0000</span>,    <span class="hljs-number">9.0000</span>,   <span class="hljs-number">10.0000</span>,   <span class="hljs-number">11.0000</span>,   <span class="hljs-number">12.0000</span>]]</span><br><span class="line">获取数组下标为<span class="hljs-number">0</span>, <span class="hljs-number">3</span>的值</span><br><span class="line"><span class="hljs-number">4.0</span></span><br><span class="line">修改数组下标为<span class="hljs-number">0</span>, <span class="hljs-number">3</span>的值</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">3.0000</span>,  <span class="hljs-number">100.0000</span>,    <span class="hljs-number">5.0000</span>,    <span class="hljs-number">6.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">7.0000</span>,    <span class="hljs-number">8.0000</span>,    <span class="hljs-number">9.0000</span>,   <span class="hljs-number">10.0000</span>,   <span class="hljs-number">11.0000</span>,   <span class="hljs-number">12.0000</span>]]</span><br><span class="line">使用索引迭代器遍历ndarray</span><br><span class="line"><span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">100.0</span></span><br><span class="line"><span class="hljs-number">5.0</span></span><br><span class="line"><span class="hljs-number">6.0</span></span><br><span class="line"><span class="hljs-number">7.0</span></span><br><span class="line"><span class="hljs-number">8.0</span></span><br><span class="line"><span class="hljs-number">9.0</span></span><br><span class="line"><span class="hljs-number">10.0</span></span><br><span class="line"><span class="hljs-number">11.0</span></span><br><span class="line"><span class="hljs-number">12.0</span></span><br></pre></td></tr></table></figure><h4 id="获取行-获取并且设置数组部分"><a href="#获取行-获取并且设置数组部分" class="headerlink" title="获取行,获取并且设置数组部分"></a>获取行,获取并且设置数组部分</h4><p>样例代码:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">INDArray nd = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;);</span><br><span class="line">System.out.println(<span class="hljs-string">"原始数组"</span>);</span><br><span class="line">System.out.println(nd);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    获取一行</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"获取数组中的一行"</span>);</span><br><span class="line">INDArray singleRow = nd.getRow(<span class="hljs-number">0</span>);</span><br><span class="line">System.out.println(singleRow);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    获取多行</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"获取数组中的多行"</span>);</span><br><span class="line">INDArray multiRows = nd.getRows(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</span><br><span class="line">System.out.println(multiRows);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    替换其中的一行</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">System.out.println(<span class="hljs-string">"替换原有数组中的一行"</span>);</span><br><span class="line">INDArray replaceRow = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>&#125;);</span><br><span class="line">nd.putRow(<span class="hljs-number">0</span>, replaceRow);</span><br><span class="line">System.out.println(nd);</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原始数组</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">3.0000</span>,    <span class="hljs-number">4.0000</span>,    <span class="hljs-number">5.0000</span>,    <span class="hljs-number">6.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">7.0000</span>,    <span class="hljs-number">8.0000</span>,    <span class="hljs-number">9.0000</span>,   <span class="hljs-number">10.0000</span>,   <span class="hljs-number">11.0000</span>,   <span class="hljs-number">12.0000</span>]]</span><br><span class="line">获取数组中的一行</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">3.0000</span>,    <span class="hljs-number">4.0000</span>,    <span class="hljs-number">5.0000</span>,    <span class="hljs-number">6.0000</span>]]</span><br><span class="line">获取数组中的多行</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">3.0000</span>,    <span class="hljs-number">4.0000</span>,    <span class="hljs-number">5.0000</span>,    <span class="hljs-number">6.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">7.0000</span>,    <span class="hljs-number">8.0000</span>,    <span class="hljs-number">9.0000</span>,   <span class="hljs-number">10.0000</span>,   <span class="hljs-number">11.0000</span>,   <span class="hljs-number">12.0000</span>]]</span><br><span class="line">替换原有数组中的一行</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">3.0000</span>,    <span class="hljs-number">5.0000</span>,    <span class="hljs-number">7.0000</span>,    <span class="hljs-number">9.0000</span>,   <span class="hljs-number">11.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">7.0000</span>,    <span class="hljs-number">8.0000</span>,    <span class="hljs-number">9.0000</span>,   <span class="hljs-number">10.0000</span>,   <span class="hljs-number">11.0000</span>,   <span class="hljs-number">12.0000</span>]]</span><br></pre></td></tr></table></figure><h4 id="矩阵操作"><a href="#矩阵操作" class="headerlink" title="矩阵操作"></a>矩阵操作</h4><p>样例代码:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1x2的行向量</span></span><br><span class="line">INDArray nd = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;);</span><br><span class="line"><span class="hljs-comment">// 2x1的列向量</span></span><br><span class="line">INDArray nd2 = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;); <span class="hljs-comment">//vector as column</span></span><br><span class="line"><span class="hljs-comment">// 创造两个2x2的矩阵</span></span><br><span class="line">INDArray nd3 = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;); <span class="hljs-comment">//elements arranged column major</span></span><br><span class="line">INDArray nd4 = Nd4j.create(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//打印</span></span><br><span class="line">System.out.println(nd);</span><br><span class="line">System.out.println(nd2);</span><br><span class="line">System.out.println(nd3);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//1x2 and 2x1 -&gt; 1x1</span></span><br><span class="line">INDArray ndv = nd.mmul(nd2);</span><br><span class="line">System.out.println(ndv + <span class="hljs-string">", shape = "</span> + Arrays.toString(ndv.shape()));</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//1x2 and 2x2 -&gt; 1x2</span></span><br><span class="line">ndv = nd.mmul(nd4);</span><br><span class="line">System.out.println(ndv + <span class="hljs-string">", shape = "</span> + Arrays.toString(ndv.shape()));</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//2x2 and 2x2 -&gt; 2x2</span></span><br><span class="line">ndv = nd3.mmul(nd4);</span><br><span class="line">System.out.println(ndv + <span class="hljs-string">", shape = "</span> + Arrays.toString(ndv.shape()));</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">2.0000</span>]]</span><br><span class="line">[<span class="hljs-number">3.0000</span>, </span><br><span class="line"> <span class="hljs-number">4.0000</span>]</span><br><span class="line">[[    <span class="hljs-number">1.0000</span>,    <span class="hljs-number">3.0000</span>], </span><br><span class="line"> [    <span class="hljs-number">2.0000</span>,    <span class="hljs-number">4.0000</span>]]</span><br><span class="line"><span class="hljs-number">11.0000</span>, shape = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]</span><br><span class="line">[[   <span class="hljs-number">13.0000</span>,   <span class="hljs-number">16.0000</span>]], shape = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]</span><br><span class="line">[[   <span class="hljs-number">18.0000</span>,   <span class="hljs-number">22.0000</span>], </span><br><span class="line"> [   <span class="hljs-number">26.0000</span>,   <span class="hljs-number">32.0000</span>]], shape = [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="Lesson-01总结"><a href="#Lesson-01总结" class="headerlink" title="Lesson 01总结"></a>Lesson 01总结</h3><p>Deeplearning4j - ND4j方法快速索引</p><p>ND4J和ND4S是JVM的科学计算库，并为生产环境设计，亦即例程运行速度快，RAM要求低。</p><p>主要特点：</p><pre><code>多用途多维数组对象多平台功能，包括GPU线性代数和信号处理功能</code></pre><p>由于易用性上存在的缺口，Java、Scala和Clojure编程人员无法充分利用NumPy或Matlab等数据分析方面最强大的工具。Breeze等其他库则不支持多维数组或张量，而这却是深度学习和其他任务的关键。ND4J和ND4S正得到国家级实验室的使用，以完成气候建模等任务。这类任务要求完成计算密集的模拟运算。</p><p>ND4J在开源、分布式、支持GPU的库内，为JVM带来了符合直觉的、Python编程人员所用的科学计算工具。在结构上，ND4J与SLF4J相似。ND4J让生产环境下的工程师能够轻松将算法和界面移植到Java和Scala体系内的其他库内。<br>创建ndarray</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建值全为<span class="hljs-number">0</span>： Nd4j.zeros(nRows, nCols) Nd4j.zeros(<span class="hljs-keyword">int</span>...)</span><br><span class="line">创建值全为<span class="hljs-number">1</span>： Nd4j.ones(nRows, nCols)</span><br><span class="line">复制NDArray： arr.dup()</span><br><span class="line">创建一个行向量或者列向量： myRow = Nd4j.create(myDoubleArr)， myCol = Nd4j.create(myDoubleArr,<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">10</span>,<span class="hljs-number">1</span>&#125;)</span><br><span class="line">使用 <span class="hljs-keyword">double</span>[][] 创建二维 NDArray : Nd4j.create(<span class="hljs-keyword">double</span>[][])</span><br><span class="line">从行或者列进行 NDArray 堆叠：Nd4j.hstack(INDArray...) Nd4j.vstack(INDArray...)</span><br><span class="line">创建元素服从正太分布的 NDArray： Nd4j.rand(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>) Nd4j.rand(<span class="hljs-keyword">int</span>[])</span><br><span class="line">普通 （<span class="hljs-number">0</span>,<span class="hljs-number">1</span>）范围的 NDArray: Nd4j.randn(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>) Nd4j.randn(<span class="hljs-keyword">int</span>[])</span><br></pre></td></tr></table></figure><p>获取 NDArray 的属性</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获取维度： rank()</span><br><span class="line">只对二维 NDArray 有用的方法，获取行和列数： rows() columns()</span><br><span class="line">第 i 个维度的长度：size(i)</span><br><span class="line">获取 NDArray 的形状： shape()</span><br><span class="line">获取所有元素的个数： arr.length()</span><br><span class="line">判断 NDArray 的类型： isMatrix() isVector() isRowVector() isRowVector()</span><br></pre></td></tr></table></figure><p>获取或者设定特定的值</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取第 i 行，第 j 列的数值：arr.getDouble(i,j)</span><br><span class="line">获取超过三维 NDArray 的值： arr.getDouble(<span class="hljs-keyword">int</span>[])</span><br><span class="line">对特定位置进行赋值：arr.putScalar(<span class="hljs-keyword">int</span>[],<span class="hljs-keyword">double</span>)</span><br></pre></td></tr></table></figure><p>张量操作</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">加上一个值： arr1.add(myDouble)</span><br><span class="line">减去一个值：arr1.sub(myDouble)</span><br><span class="line">乘以一个值：arr.mul(myDouble)</span><br><span class="line">除以一个值：arr.div(myDouble)</span><br><span class="line">减法反操作（scalar - arr1）：arr1.rsub(myDouble)</span><br><span class="line">除法反操作（scalar / arr1）：arr1.rdiv(myDouble)</span><br></pre></td></tr></table></figure><p>元素（Element-Wise）操作</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加：arr1.add(arr2)</span><br><span class="line">减：arr1.sub(arr2)</span><br><span class="line">乘：arr1.mul(arr2)</span><br><span class="line">除：arr1.div(arr2)</span><br><span class="line">赋值：arr1.assign(arr2)</span><br></pre></td></tr></table></figure><p>规约操作</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">所有元素的和：arr.sumNumber()</span><br><span class="line">所有元素的乘积：arr.prod()</span><br><span class="line">L1或者L2范数：arr.norm1() arr.norm2()</span><br><span class="line">所有元素的标准差：arr.stdNumber()</span><br></pre></td></tr></table></figure><p>线性代数操作</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">矩阵乘法：arr1.mmul(arr2)</span><br><span class="line">矩阵转置：transpose()</span><br><span class="line">获取对角矩阵：Nd4j.diag(INDArray)</span><br><span class="line">矩阵求逆：InvertMatrix.invert(INDArray,<span class="hljs-keyword">boolean</span>)</span><br></pre></td></tr></table></figure><p>获取 NDArray 一部分</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取一行（仅用于<span class="hljs-number">2</span>维 NDArray）：getRow(<span class="hljs-keyword">int</span>)</span><br><span class="line">获取多行（仅用于<span class="hljs-number">2</span>维 NDArray）：getRows(<span class="hljs-keyword">int</span>...)</span><br><span class="line">设置一行（仅用于<span class="hljs-number">2</span>维 NDArray）：putRow(<span class="hljs-keyword">int</span>,INDArray)</span><br><span class="line">获取前三行，所有列的值：Nd4j.create(<span class="hljs-number">0</span>).get(NDArrayIndex.interval(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>),NDArrayIndex.all());</span><br></pre></td></tr></table></figure><p>元素级变换（Tanh, Sigmoid, Sin, Log etc）</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 Transform :Transforms.sin(INDArray) Transforms.log(INDArray) Transforms.sigmoid(INDArray)</span><br><span class="line">方法<span class="hljs-number">1</span>： Nd4j.getExecutioner().execAndReturn(<span class="hljs-keyword">new</span> Tanh(INDArray))</span><br><span class="line">方法<span class="hljs-number">2</span>： Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform(<span class="hljs-string">"tanh"</span>,INDArray))</span><br></pre></td></tr></table></figure><p><strong>转载自本文为CSDN博主「寒沧」的原创文章</strong></p><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>Pom配置如下</p><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dl4j-tutorials<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- Change the nd4j.backend property to nd4j-cuda-9.2 to use CUDA GPUs --&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- CPU使用  nd4j-native-platform --&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- GPU使用  nd4j-cuda-9.2-platform--&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">nd4j.backend</span>&gt;</span>nd4j-native-platform<span class="hljs-tag">&lt;/<span class="hljs-name">nd4j.backend</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">shadedClassifier</span>&gt;</span>bin<span class="hljs-tag">&lt;/<span class="hljs-name">shadedClassifier</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">nd4j.version</span>&gt;</span>1.0.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">nd4j.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dl4j.version</span>&gt;</span>1.0.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">dl4j.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">datavec.version</span>&gt;</span>1.0.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">datavec.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">arbiter.version</span>&gt;</span>1.0.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">arbiter.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">rl4j.version</span>&gt;</span>1.0.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">rl4j.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- For Spark examples: change the _1 to _2 to switch between Spark 1 and Spark 2 --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dl4j.spark.version</span>&gt;</span>1.0.0-beta2_spark_1<span class="hljs-tag">&lt;/<span class="hljs-name">dl4j.spark.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">datavec.spark.version</span>&gt;</span>1.0.0-beta2_spark_1<span class="hljs-tag">&lt;/<span class="hljs-name">datavec.spark.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">jcommander.version</span>&gt;</span>1.27<span class="hljs-tag">&lt;/<span class="hljs-name">jcommander.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- Scala binary version: DL4J's Spark and UI functionality are released with both Scala 2.10 and 2.11 support --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">scala.binary.version</span>&gt;</span>2.11<span class="hljs-tag">&lt;/<span class="hljs-name">scala.binary.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">guava.version</span>&gt;</span>19.0<span class="hljs-tag">&lt;/<span class="hljs-name">guava.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">logback.version</span>&gt;</span>1.1.7<span class="hljs-tag">&lt;/<span class="hljs-name">logback.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">jfreechart.version</span>&gt;</span>1.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">jfreechart.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">jcommon.version</span>&gt;</span>1.0.23<span class="hljs-tag">&lt;/<span class="hljs-name">jcommon.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">maven-shade-plugin.version</span>&gt;</span>2.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">maven-shade-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">exec-maven-plugin.version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">exec-maven-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">maven.minimum.version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">maven.minimum.version</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.nd4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nd4j-native-platform<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;nd4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.nd4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nd4j-cuda-9.2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;nd4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- ND4J backend. You need one in every DL4J project. Normally define artifactId as either "nd4j-native-platform" or "nd4j-cuda-7.5-platform" --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.nd4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>$&#123;nd4j.backend&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;nd4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.deeplearning4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>deeplearning4j-cuda-9.2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dl4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- Core DL4J functionality --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.deeplearning4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>deeplearning4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dl4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.deeplearning4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>deeplearning4j-nlp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dl4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.deeplearning4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>deeplearning4j-zoo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dl4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- deeplearning4j-ui is used for HistogramIterationListener + visualization: see http://deeplearning4j.org/visualization --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.deeplearning4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>deeplearning4j-ui_$&#123;scala.binary.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dl4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- Force guava versions for using UI/HistogramIterationListener --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- datavec-data-codec: used only in video example for loading video data --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>datavec-data-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.datavec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;datavec.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- Used in the feedforward/classification/MLP* and feedforward/regression/RegressionMathFunctions example --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jfree<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jfreechart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jfreechart.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jfree<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcommon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jcommon.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">&lt;!-- Used for downloading data in some of the examples --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.mojo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>exec-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;exec-maven-plugin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="line">                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;maven-shade-plugin.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">shadedArtifactAttached</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">shadedArtifactAttached</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">shadedClassifierName</span>&gt;</span>$&#123;shadedClassifier&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">shadedClassifierName</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">createDependencyReducedPom</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line">                            <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>*:*<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span></span><br><span class="line">                            <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>org/datanucleus/**<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.SF<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.DSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.RSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span></span><br><span class="line">                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">"org.apache.maven.plugins.shade.resource.AppendingTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>reference.conf<span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"</span>/&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="line">                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="line">                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这一系列博文我将学习DeepLearning4J深度学习的一系列知识，依托于一个毕业设计项目：基于深度学习图像识别分析的X光骨龄检测与分析。选择dl4j的主要原因是因为个人喜欢Java变成，对python不感冒，而dl4j是一个企业级应用水准的深度学习框架，完全可以胜任这项任务。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.octber.xyz/categories/Java/"/>
    
    
      <category term="dl4f" scheme="https://www.octber.xyz/tags/dl4f/"/>
    
  </entry>
  
  <entry>
    <title>华为前辈语录</title>
    <link href="https://www.octber.xyz/2019/10/18/e135733e.html"/>
    <id>https://www.octber.xyz/2019/10/18/e135733e.html</id>
    <published>2019-10-18T08:28:50.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog.">    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="华为" scheme="https://www.octber.xyz/categories/%E5%8D%8E%E4%B8%BA/"/>
    
    
      <category term="华为" scheme="https://www.octber.xyz/tags/%E5%8D%8E%E4%B8%BA/"/>
    
  </entry>
  
  <entry>
    <title>信、蓝</title>
    <link href="https://www.octber.xyz/2019/10/16/68296740.html"/>
    <id>https://www.octber.xyz/2019/10/16/68296740.html</id>
    <published>2019-10-16T05:52:09.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog.">    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="信" scheme="https://www.octber.xyz/categories/%E4%BF%A1/"/>
    
    
      <category term="信" scheme="https://www.octber.xyz/tags/%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019.9.18阶段总结</title>
    <link href="https://www.octber.xyz/2019/09/18/6f5148a5.html"/>
    <id>https://www.octber.xyz/2019/09/18/6f5148a5.html</id>
    <published>2019-09-18T07:11:43.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog.">    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="日记" scheme="https://www.octber.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="https://www.octber.xyz/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019.9.12日报</title>
    <link href="https://www.octber.xyz/2019/09/12/24debdba.html"/>
    <id>https://www.octber.xyz/2019/09/12/24debdba.html</id>
    <published>2019-09-12T09:32:45.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>[TOC]</p><a id="more"></a><h2 id="1-任务与任务进度-工时说明"><a href="#1-任务与任务进度-工时说明" class="headerlink" title="1. 任务与任务进度/工时说明"></a>1. 任务与任务进度/工时说明</h2><blockquote><p>今天主要任务为测试，下面说一下测试中发现的问题，已经提交到测试发现问题一览中</p></blockquote><h3 id="1-1-测试问题：银行间联系人"><a href="#1-1-测试问题：银行间联系人" class="headerlink" title="1.1 测试问题：银行间联系人"></a>1.1 测试问题：银行间联系人</h3><ul><li>问题：银行间联系人新增【联系电话】格式校验问题</li></ul><h3 id="1-2-测试问题：干系人信息"><a href="#1-2-测试问题：干系人信息" class="headerlink" title="1.2 测试问题：干系人信息"></a>1.2 测试问题：干系人信息</h3><ul><li>问题：干系人信息修改中【评级展望】下拉框选中后显示“输入的不是整数格式”</li></ul><h2 id="2-已解决的问题"><a href="#2-已解决的问题" class="headerlink" title="2. 已解决的问题"></a>2. 已解决的问题</h2><ul><li>测试</li></ul><h2 id="3-未解决的问题"><a href="#3-未解决的问题" class="headerlink" title="3. 未解决的问题"></a>3. 未解决的问题</h2><h2 id="4-进度延迟原因说明"><a href="#4-进度延迟原因说明" class="headerlink" title="4. 进度延迟原因说明"></a>4. 进度延迟原因说明</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="https://www.octber.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日报" scheme="https://www.octber.xyz/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(十):类加载器</title>
    <link href="https://www.octber.xyz/2019/09/12/6217634d.html"/>
    <id>https://www.octber.xyz/2019/09/12/6217634d.html</id>
    <published>2019-09-12T02:05:41.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(九):类加载的过程</title>
    <link href="https://www.octber.xyz/2019/09/12/c02d25da.html"/>
    <id>https://www.octber.xyz/2019/09/12/c02d25da.html</id>
    <published>2019-09-12T02:04:55.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(八):类加载的时机</title>
    <link href="https://www.octber.xyz/2019/09/12/dddf93f5.html"/>
    <id>https://www.octber.xyz/2019/09/12/dddf93f5.html</id>
    <published>2019-09-12T02:04:05.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(七):类文件结构</title>
    <link href="https://www.octber.xyz/2019/09/12/4cb366d.html"/>
    <id>https://www.octber.xyz/2019/09/12/4cb366d.html</id>
    <published>2019-09-12T02:03:15.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(六):JVM性能调优</title>
    <link href="https://www.octber.xyz/2019/09/12/10d372fb.html"/>
    <id>https://www.octber.xyz/2019/09/12/10d372fb.html</id>
    <published>2019-09-12T02:02:43.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(五):内存分配与回收策略</title>
    <link href="https://www.octber.xyz/2019/09/12/693d4716.html"/>
    <id>https://www.octber.xyz/2019/09/12/693d4716.html</id>
    <published>2019-09-12T02:02:06.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(四):HotSpot垃圾回收器</title>
    <link href="https://www.octber.xyz/2019/09/12/2bed3760.html"/>
    <id>https://www.octber.xyz/2019/09/12/2bed3760.html</id>
    <published>2019-09-12T02:01:13.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(三):垃圾收集策略与算法</title>
    <link href="https://www.octber.xyz/2019/09/12/456b8be2.html"/>
    <id>https://www.octber.xyz/2019/09/12/456b8be2.html</id>
    <published>2019-09-12T02:00:52.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h4 id="垃圾收集策略与算法"><a href="#垃圾收集策略与算法" class="headerlink" title="垃圾收集策略与算法"></a>垃圾收集策略与算法</h4><p>程序计数器、虚拟机栈、本地方法栈随线程而生，也随线程而灭；栈帧随着方法的开始而入栈，随着方法的结束而出栈。这几个区域的内存分配和回收都具有确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。</p><p>而对于 Java 堆和方法区，我们只有在程序运行期间才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的正是这部分内存。</p><a id="more"></a><h2 id="判定对象是否存活"><a href="#判定对象是否存活" class="headerlink" title="判定对象是否存活"></a>判定对象是否存活</h2><p>若一个对象不被任何对象或变量引用，那么它就是无效对象，需要被回收。</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>在对象头维护着一个 counter 计数器，对象被引用一次则计数器 +1；若引用失效则计数器 -1。当计数器为 0 时，就认为该对象无效了。</p><p>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法。但是主流的 Java 虚拟机里没有选用引用计数算法来管理内存，主要是因为它很难解决对象之间循环引用的问题。</p><blockquote><p>举个栗子👉对象 objA 和 objB 都有字段 instance，令 objA.instance = objB 并且 objB.instance = objA，由于它们互相引用着对方，导致它们的引用计数都不为 0，于是引用计数算法无法通知 GC 收集器回收它们。</p></blockquote><h3 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h3><p>所有和 GC Roots 直接或间接关联的对象都是有效对象，和 GC Roots 没有关联的对象就是无效对象。</p><p>GC Roots 是指：</p><ul><li>Java 虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>本地方法栈中引用的对象</li><li>方法区中常量引用的对象</li><li>方法区中类静态属性引用的对象</li></ul><p>GC Roots 并不包括堆中对象所引用的对象，这样就不会有循环引用的问题。</p><h2 id="引用的种类"><a href="#引用的种类" class="headerlink" title="引用的种类"></a>引用的种类</h2><p>判定对象是否存活与“引用”有关。在 JDK 1.2 以前，Java 中的引用定义很传统，一个对象只有被引用或者没有被引用两种状态，我们希望能描述这一类对象：当内存空间还足够时，则保留在内存中；如果内存空间在进行垃圾手收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。</p><p>在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为了以下四种。不同的引用类型，主要体现的是对象不同的可达性状态<code>reachable</code>和垃圾收集的影响。</p><h3 id="强引用（Strong-Reference）"><a href="#强引用（Strong-Reference）" class="headerlink" title="强引用（Strong Reference）"></a>强引用（Strong Reference）</h3><p>类似 “Object obj = new Object()” 这类的引用，就是强引用，只要强引用存在，垃圾收集器永远不会回收被引用的对象。但是，如果我们<strong>错误地保持了强引用</strong>，比如：赋值给了 static 变量，那么对象在很长一段时间内不会被回收，会产生内存泄漏。</p><h3 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h3><p>软引用是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来<strong>实现内存敏感的缓存</strong>，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p><h3 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h3><p>弱引用的<strong>强度比软引用更弱</strong>一些。当 JVM 进行垃圾回收时，<strong>无论内存是否充足，都会回收</strong>只被弱引用关联的对象。</p><h3 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h3><p>虚引用也称幽灵引用或者幻影引用，它是<strong>最弱</strong>的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。它仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制。</p><h2 id="回收堆中无效对象"><a href="#回收堆中无效对象" class="headerlink" title="回收堆中无效对象"></a>回收堆中无效对象</h2><p>对于可达性分析中不可达的对象，也并不是没有存活的可能。</p><h3 id="判定-finalize-是否有必要执行"><a href="#判定-finalize-是否有必要执行" class="headerlink" title="判定 finalize() 是否有必要执行"></a>判定 finalize() 是否有必要执行</h3><p>JVM 会判断此对象是否有必要执行 finalize() 方法，如果对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，那么视为“没有必要执行”。那么对象基本上就真的被回收了。</p><p>如果对象被判定为有必要执行 finalize() 方法，那么对象会被放入一个 F-Queue 队列中，虚拟机会以较低的优先级执行这些 finalize()方法，但不会确保所有的 finalize() 方法都会执行结束。如果 finalize() 方法出现耗时操作，虚拟机就直接停止指向该方法，将对象清除。</p><h3 id="对象重生或死亡"><a href="#对象重生或死亡" class="headerlink" title="对象重生或死亡"></a>对象重生或死亡</h3><p>如果在执行 finalize() 方法时，将 this 赋给了某一个引用，那么该对象就重生了。如果没有，那么就会被垃圾收集器清除。</p><blockquote><p>任何一个对象的 finalize() 方法只会被系统自动调用一次，如果对象面临下一次回收，它的 finalize() 方法不会被再次执行，想继续在 finalize() 中自救就失效了。</p></blockquote><h2 id="回收方法区内存"><a href="#回收方法区内存" class="headerlink" title="回收方法区内存"></a>回收方法区内存</h2><p>方法区中存放生命周期较长的类信息、常量、静态变量，每次垃圾收集只有少量的垃圾被清除。方法区中主要清除两种垃圾：</p><ul><li>废弃常量</li><li>无用的类</li></ul><h3 id="判定废弃常量"><a href="#判定废弃常量" class="headerlink" title="判定废弃常量"></a>判定废弃常量</h3><p>只要常量池中的常量不被任何变量或对象引用，那么这些常量就会被清除掉。比如，一个字符串 “bingo” 进入了常量池，但是当前系统没有任何一个 String 对象引用常量池中的 “bingo” 常量，也没有其它地方引用这个字面量，必要的话，”bingo”常量会被清理出常量池。</p><h3 id="判定无用的类"><a href="#判定无用的类" class="headerlink" title="判定无用的类"></a>判定无用的类</h3><p>判定一个类是否是“无用的类”，条件较为苛刻。</p><ul><li>该类的所有对象都已经被清除</li><li>加载该类的 ClassLoader 已经被回收</li><li>该类的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><blockquote><p>一个类被虚拟机加载进方法区，那么在堆中就会有一个代表该类的对象：java.lang.Class。这个对象在类被加载进方法区时创建，在方法区该类被删除时清除。</p></blockquote><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>学会了如何判定无效对象、无用类、废弃常量之后，剩余工作就是回收这些垃圾。常见的垃圾收集算法有以下几个：</p><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p><strong>标记</strong>的过程是：遍历所有的 <code>GC Roots</code>，然后将所有 <code>GC Roots</code> 可达的对象<strong>标记为存活的对象</strong>。</p><p><strong>清除</strong>的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。与此同时，清除那些被标记过的对象的标记，以便下次的垃圾回收。 </p><p>这种方法有两个<strong>不足</strong>：</p><ul><li>效率问题：标记和清除两个过程的效率都不高。</li><li>空间问题：标记清除之后会产生大量不连续的内存碎片，碎片太多可能导致以后需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ul><h3 id="复制算法（新生代）"><a href="#复制算法（新生代）" class="headerlink" title="复制算法（新生代）"></a>复制算法（新生代）</h3><p>为了解决效率问题，“复制”收集算法出现了。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完，需要进行垃圾收集时，就将存活者的对象复制到另一块上面，然后将第一块内存全部清除。这种算法有优有劣：</p><ul><li>优点：不会有内存碎片的问题。</li><li>缺点：内存缩小为原来的一半，浪费空间。</li></ul><p>为了解决空间利用率问题，可以将内存分为三块： Eden、From Survivor、To Survivor，比例是 8:1:1，每次使用 Eden 和其中一块 Survivor。回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另外一块 Survivor 空间上，最后清理掉 Eden 和刚才使用的 Survivor 空间。这样只有 10% 的内存被浪费。</p><p>但是我们无法保证每次回收都只有不多于 10% 的对象存活，当 Survivor 空间不够，需要依赖其他内存（指老年代）进行分配担保。</p><h4 id="分配担保"><a href="#分配担保" class="headerlink" title="分配担保"></a>分配担保</h4><p>为对象分配内存空间时，如果 Eden+Survivor 中空闲区域无法装下该对象，会触发 MinorGC 进行垃圾收集。但如果 Minor GC 过后依然有超过 10% 的对象存活，这样存活的对象直接通过分配担保机制进入老年代，然后再将新对象存入 Eden 区。</p><h3 id="标记-整理算法（老年代）"><a href="#标记-整理算法（老年代）" class="headerlink" title="标记-整理算法（老年代）"></a>标记-整理算法（老年代）</h3><p><strong>标记</strong>：它的第一个阶段与<strong>标记/清除算法</strong>是一模一样的，均是遍历 <code>GC Roots</code>，然后将存活的对象标记。</p><p><strong>整理</strong>：移动所有<strong>存活的对象</strong>，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。</p><p>这是一种老年代的垃圾收集算法。老年代的对象一般寿命比较长，因此每次垃圾回收会有大量对象存活，如果采用复制算法，每次需要复制大量存活的对象，效率很低。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>根据对象存活周期的不同，将内存划分为几块。一般是把 Java 堆分为新生代和老年代，针对各个年代的特点采用最适当的收集算法。  </p><ul><li>新生代：复制算法</li><li>老年代：标记-清除算法、标记-整理算法</li></ul><h2 id="（完）"><a href="#（完）" class="headerlink" title="（完）"></a>（完）</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h4 id=&quot;垃圾收集策略与算法&quot;&gt;&lt;a href=&quot;#垃圾收集策略与算法&quot; class=&quot;headerlink&quot; title=&quot;垃圾收集策略与算法&quot;&gt;&lt;/a&gt;垃圾收集策略与算法&lt;/h4&gt;&lt;p&gt;程序计数器、虚拟机栈、本地方法栈随线程而生，也随线程而灭；栈帧随着方法的开始而入栈，随着方法的结束而出栈。这几个区域的内存分配和回收都具有确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。&lt;/p&gt;
&lt;p&gt;而对于 Java 堆和方法区，我们只有在程序运行期间才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的正是这部分内存。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(二):HotSpot虚拟机对象</title>
    <link href="https://www.octber.xyz/2019/09/12/6d96b808.html"/>
    <id>https://www.octber.xyz/2019/09/12/6d96b808.html</id>
    <published>2019-09-12T02:00:29.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列(一):JVM内存结构</title>
    <link href="https://www.octber.xyz/2019/09/12/eba9b34b.html"/>
    <id>https://www.octber.xyz/2019/09/12/eba9b34b.html</id>
    <published>2019-09-12T01:58:20.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 虚拟机的内存空间分为 5 个部分：</p><ul><li>程序计数器</li><li>Java 虚拟机栈</li><li>本地方法栈</li><li>堆</li><li>方法区</li></ul><p><img src="/2019/09/12/JVM系列-一-JVM内存结构/jvm-memory-structure.jpg" alt="jvm-memory-structure"></p><p>JDK 1.8 同 JDK 1.7 比，最大的差别就是：元数据区取代了永久代。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元数据空间并不在虚拟机中，而是使用本地内存。</p><a id="more"></a><h2 id="程序计数器（PC-寄存器）"><a href="#程序计数器（PC-寄存器）" class="headerlink" title="程序计数器（PC 寄存器）"></a>程序计数器（PC 寄存器）</h2><h3 id="程序计数器的定义"><a href="#程序计数器的定义" class="headerlink" title="程序计数器的定义"></a>程序计数器的定义</h3><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为<code>Undefined</code>。</p><h3 id="程序计数器的作用"><a href="#程序计数器的作用" class="headerlink" title="程序计数器的作用"></a>程序计数器的作用</h3><ul><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制。</li><li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li></ul><h3 id="程序计数器的特点"><a href="#程序计数器的特点" class="headerlink" title="程序计数器的特点"></a>程序计数器的特点</h3><ul><li>是一块较小的内存空间。</li><li>线程私有，每条线程都有自己的程序计数器。</li><li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li><li>是唯一一个不会出现<code>OutOfMemoryError</code>的内存区域。</li></ul><h2 id="Java-虚拟机栈（Java-栈）"><a href="#Java-虚拟机栈（Java-栈）" class="headerlink" title="Java 虚拟机栈（Java 栈）"></a>Java 虚拟机栈（Java 栈）</h2><h3 id="Java-虚拟机栈的定义"><a href="#Java-虚拟机栈的定义" class="headerlink" title="Java 虚拟机栈的定义"></a>Java 虚拟机栈的定义</h3><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p><p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做“栈帧”的区域，用于存放该方法运行过程中的一些信息，如：</p><ul><li>局部变量表</li><li>操作数栈</li><li>动态链接</li><li>方法出口信息</li><li>……</li></ul><p><img src="/2019/09/12/JVM系列-一-JVM内存结构/jvm-stack.jpg" alt></p><h3 id="压栈出栈过程"><a href="#压栈出栈过程" class="headerlink" title="压栈出栈过程"></a>压栈出栈过程</h3><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p><p>Java 虚拟机栈的栈顶的栈帧是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p><p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p><blockquote><p>由于Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p></blockquote><h3 id="Java-虚拟机栈的特点"><a href="#Java-虚拟机栈的特点" class="headerlink" title="Java 虚拟机栈的特点"></a>Java 虚拟机栈的特点</h3><ul><li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可。在方法运行过程中，局部变量表的大小不会发生改变。</li><li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul><li>StackOverFlowError  若 Java 虚拟机栈的大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li><li>OutOfMemoryError  若允许动态扩展，那么当线程请求栈时内存用完了，无法再动态扩展时，抛出 OutOfMemoryError 异常。</li></ul></li><li>Java 虚拟机栈也是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li></ul><blockquote><p>出现 StackOverFlowError 时，内存空间可能还有很多。</p></blockquote><h2 id="本地方法栈（C-栈）"><a href="#本地方法栈（C-栈）" class="headerlink" title="本地方法栈（C 栈）"></a>本地方法栈（C 栈）</h2><h3 id="本地方法栈的定义"><a href="#本地方法栈的定义" class="headerlink" title="本地方法栈的定义"></a>本地方法栈的定义</h3><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p><h3 id="栈帧变化过程"><a href="#栈帧变化过程" class="headerlink" title="栈帧变化过程"></a>栈帧变化过程</h3><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、动态链接、方法出口信息等。</p><p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMemoryError 异常。</p><blockquote><p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p></blockquote><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="堆的定义"><a href="#堆的定义" class="headerlink" title="堆的定义"></a>堆的定义</h3><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p><h3 id="堆的特点"><a href="#堆的特点" class="headerlink" title="堆的特点"></a>堆的特点</h3><ul><li>线程共享，整个 Java 虚拟机只有一个堆，所有的线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li><li>在虚拟机启动时创建。</li><li>是垃圾回收的主要场所。</li><li>进一步可分为：新生代(Eden区  From Survior  To Survivor)、老年代。</li></ul><p>不同的区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p><p>堆的大小既可以固定也可以扩展，但对于主流的虚拟机，堆的大小是可扩展的，因此当线程请求分配内存，但堆已满，且内存已无法再扩展时，就抛出 OutOfMemoryError 异常。</p><blockquote><p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p></blockquote><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h3 id="方法区的定义"><a href="#方法区的定义" class="headerlink" title="方法区的定义"></a>方法区的定义</h3><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：  </p><ul><li>已经被虚拟机加载的类信息</li><li>常量</li><li>静态变量</li><li>即时编译器编译后的代码</li></ul><h3 id="方法区的特点"><a href="#方法区的特点" class="headerlink" title="方法区的特点"></a>方法区的特点</h3><ul><li>线程共享。  方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享的。整个虚拟机中只有一个方法区。</li><li>永久代。  方法区中的信息一般需要长期存在，而且它又是堆的逻辑分区，因此用堆的划分方法，把方法区称为“永久代”。</li><li>内存回收效率低。  方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li><li>Java 虚拟机规范对方法区的要求比较宽松。  和堆一样，<strong>允许固定大小，也允许动态扩展，还允许不实现垃圾回收</strong>。</li></ul><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>方法区中存放：类信息、常量、静态变量、即时编译器编译后的代码。常量就存放在运行时常量池中。</p><p>当类被 Java 虚拟机加载后， .class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的 intern() 方法就能在运行期间向常量池中添加字符串常量。</p><h2 id="直接内存（堆外内存）"><a href="#直接内存（堆外内存）" class="headerlink" title="直接内存（堆外内存）"></a>直接内存（堆外内存）</h2><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p><h3 id="操作直接内存"><a href="#操作直接内存" class="headerlink" title="操作直接内存"></a>操作直接内存</h3><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提高了数据操作的效率。</p><p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p><h3 id="直接内存与堆内存比较"><a href="#直接内存与堆内存比较" class="headerlink" title="直接内存与堆内存比较"></a>直接内存与堆内存比较</h3><ul><li>直接内存申请空间耗费更高的性能</li><li>直接内存读取 IO 的性能要优于普通的堆内存。</li><li>直接内存作用链： 本地 IO -&gt; 直接内存 -&gt; 本地 IO</li><li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li></ul><blockquote><p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现<code>OutOfMemoryError</code>异常。</p></blockquote><h2 id="（完）"><a href="#（完）" class="headerlink" title="（完）"></a>（完）</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java 虚拟机的内存空间分为 5 个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序计数器&lt;/li&gt;
&lt;li&gt;Java 虚拟机栈&lt;/li&gt;
&lt;li&gt;本地方法栈&lt;/li&gt;
&lt;li&gt;堆&lt;/li&gt;
&lt;li&gt;方法区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/12/JVM系列-一-JVM内存结构/jvm-memory-structure.jpg&quot; alt=&quot;jvm-memory-structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;JDK 1.8 同 JDK 1.7 比，最大的差别就是：元数据区取代了永久代。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元数据空间并不在虚拟机中，而是使用本地内存。&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM原理系列详解</title>
    <link href="https://www.octber.xyz/2019/09/12/70b32fd9.html"/>
    <id>https://www.octber.xyz/2019/09/12/70b32fd9.html</id>
    <published>2019-09-12T01:37:46.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列博文将详细介绍JVM系列知识，内容大多来自GitHub牛人的总结和观点，加上本人的思考，特此留念。</p><blockquote><p>特别鸣谢：<a href="https://github.com/doocs" target="_blank" rel="noopener">doocs</a></p></blockquote><a id="more"></a><p>这里仅仅记录了一些笔者认为需要重点掌握的 JVM 知识点，如果你想更加全面地了解 JVM 底层原理，可以阅读周志明老师《<a href="/book/jvm.pdf">深入理解Java虚拟机——JVM高级特性与最佳实践(第2版)</a>》全书。</p><h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><div style="border: 1px solid #000;width: 350px;height:750px;background-color: #f4f4f4"><br>    <p style="padding-left: 30px;padding-right: 30px;"><br>        <b style="color: blue;padding-left: 50px;"> JVM 原理系列详解 目录</b><br><br>        <span>链接：<a href="https://blog.octber.xyz/categories/JVM/" target="_blank" rel="noopener">十月博客-JVM</a></span><br><br>        <span>最后更新日期：2019-09-12 09:37:46</span><br><br>    </p><br>    <b style="padding-left: 20px;padding-bottom: 10px;">目录</b><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/eba9b34b.html" target="_blank" rel="noopener">JVM内存结构</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/6d96b808.html" target="_blank" rel="noopener">HotSpot 虚拟机对象探秘</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/456b8be2.html" target="_blank" rel="noopener">垃圾收集策略与算法</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/2bed3760.html" target="_blank" rel="noopener">HotSpot 垃圾收集器</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/693d4716.html" target="_blank" rel="noopener">内存分配与回收策略</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/10d372fb.html" target="_blank" rel="noopener">JVM 性能调优</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/4cb366d.html" target="_blank" rel="noopener">类文件结构</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/dddf93f5.html" target="_blank" rel="noopener">类加载的时机</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/c02d25da.html" target="_blank" rel="noopener">类加载的过程</a></span><br>    <span style="padding-left: 20px;"><a href="https://blog.octber.xyz/2019/09/12/6217634d.html" target="_blank" rel="noopener">类加载器</a></span><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本系列博文将详细介绍JVM系列知识，内容大多来自GitHub牛人的总结和观点，加上本人的思考，特此留念。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特别鸣谢：&lt;a href=&quot;https://github.com/doocs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;doocs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://www.octber.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://www.octber.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>2019.9.11日报</title>
    <link href="https://www.octber.xyz/2019/09/11/1536a727.html"/>
    <id>https://www.octber.xyz/2019/09/11/1536a727.html</id>
    <published>2019-09-11T12:40:07.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>[TOC]</p><a id="more"></a><h2 id="1-任务与任务进度-工时说明"><a href="#1-任务与任务进度-工时说明" class="headerlink" title="1. 任务与任务进度/工时说明"></a>1. 任务与任务进度/工时说明</h2><h3 id="1-1-测试：开户修改与详情页"><a href="#1-1-测试：开户修改与详情页" class="headerlink" title="1.1 测试：开户修改与详情页"></a>1.1 测试：开户修改与详情页</h3><ul><li>问题： 详情页开户流程显示有问题，与对应内容不符合</li><li>解决进度： 100%</li></ul><h3 id="1-2-测试：提交-复核-工作流中各个环节状态确认"><a href="#1-2-测试：提交-复核-工作流中各个环节状态确认" class="headerlink" title="1.2 测试：提交-复核 工作流中各个环节状态确认"></a>1.2 测试：提交-复核 工作流中各个环节状态确认</h3><ul><li>问题： 复核通过/拒绝后首页待办仍然显示</li><li>解决进度： 100%</li></ul><h3 id="1-3-测试：-场外模块其他功能"><a href="#1-3-测试：-场外模块其他功能" class="headerlink" title="1.3 测试： 场外模块其他功能"></a>1.3 测试： 场外模块其他功能</h3><ul><li>问题： 除部分样式问题，暂无发现其他问题</li></ul><h3 id="1-4-测试：-开户、修改开户信息中信息对应问题"><a href="#1-4-测试：-开户、修改开户信息中信息对应问题" class="headerlink" title="1.4 测试： 开户、修改开户信息中信息对应问题"></a>1.4 测试： 开户、修改开户信息中信息对应问题</h3><ul><li>问题： 页面加载速度不同，响应结果不同</li><li>解决进度： 100%</li></ul><h2 id="2-已解决的问题"><a href="#2-已解决的问题" class="headerlink" title="2. 已解决的问题"></a>2. 已解决的问题</h2><p>测试中发现的问题</p><h2 id="3-未解决的问题"><a href="#3-未解决的问题" class="headerlink" title="3. 未解决的问题"></a>3. 未解决的问题</h2><h2 id="4-进度延迟原因说明"><a href="#4-进度延迟原因说明" class="headerlink" title="4. 进度延迟原因说明"></a>4. 进度延迟原因说明</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="https://www.octber.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日报" scheme="https://www.octber.xyz/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>redis的并发竞争</title>
    <link href="https://www.octber.xyz/2019/09/11/264d613d.html"/>
    <id>https://www.octber.xyz/2019/09/11/264d613d.html</id>
    <published>2019-09-11T11:26:30.000Z</published>
    <updated>2020-03-09T14:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>特别鸣谢 <a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener"><strong>石杉的架构笔记</strong></a></p></blockquote><p>redis 的并发竞争问题是什么？如何解决这个问题？了解 redis 事务的 CAS 方案吗？</p><p>这个也是线上非常常见的一个问题，就是<strong>多客户端同时并发写</strong>一个 key，可能本来应该先到的数据后到了，导致数据版本错了；或者是多客户端同时获取一个 key，修改值之后再写回去，只要顺序错了，数据就错了。</p><p>而且 redis 自己就有天然解决这个问题的 CAS 类的乐观锁方案。</p><a id="more"></a><p>某个时刻，多个系统实例都去更新某个 key。可以基于 zookeeper 实现分布式锁。每个系统通过 zookeeper 获取分布式锁，确保同一时间，只能有一个系统实例在操作某个 key，别人都不允许读和写。</p><p><img src="/2019/09/11/redis的并发竞争/1568201246569.png" alt="1568201246569"></p><p>你要写入缓存的数据，都是从 mysql 里查出来的，都得写入 mysql 中，写入 mysql 中的时候必须保存一个时间戳，从 mysql 查出来的时候，时间戳也查出来。</p><p>每次要<strong>写之前，先判断</strong>一下当前这个 value 的时间戳是否比缓存里的 value 的时间戳要新。如果是的话，那么可以写，否则，就不能用旧的数据覆盖新的数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;特别鸣谢 &lt;a href=&quot;https://github.com/doocs/advanced-java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;石杉的架构笔记&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis 的并发竞争问题是什么？如何解决这个问题？了解 redis 事务的 CAS 方案吗？&lt;/p&gt;
&lt;p&gt;这个也是线上非常常见的一个问题，就是&lt;strong&gt;多客户端同时并发写&lt;/strong&gt;一个 key，可能本来应该先到的数据后到了，导致数据版本错了；或者是多客户端同时获取一个 key，修改值之后再写回去，只要顺序错了，数据就错了。&lt;/p&gt;
&lt;p&gt;而且 redis 自己就有天然解决这个问题的 CAS 类的乐观锁方案。&lt;/p&gt;
    
    </summary>
    
      <category term="缓存" scheme="https://www.octber.xyz/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="Redis" scheme="https://www.octber.xyz/tags/Redis/"/>
    
  </entry>
  
</feed>
